// --------------------------------------------------------------------
// Copyright (c) 2010 by Terasic Technologies Inc.
// --------------------------------------------------------------------
//
// Permission:
//
//   Terasic grants permission to use and modify this code for use
//   in synthesis for all Terasic Development Boards and Altera Development
//   Kits made by Terasic.  Other use of this code, including the selling
//   ,duplication, or modification of any portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL/Verilog or C/C++ source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Terasic provides no warranty regarding the use
//   or functionality of this code.
//
// --------------------------------------------------------------------
//
//                     Terasic Technologies Inc
//                     356 Fu-Shin E. Rd Sec. 1. JhuBei City,
//                     HsinChu County, Taiwan
//                     302
//
//                     web: http://www.terasic.com/
//                     email: support@terasic.com
//
// --------------------------------------------------------------------
//
// Major Functions:    DE2_115 D5M+VGA 640*480 800*600 solution
//
// --------------------------------------------------------------------
//
// Revision History :
// --------------------------------------------------------------------
//   Ver  :| Author            :| Mod. Date :| Changes Made:
//   V1.0 :| Johnny FAN Peli Li:| 22/07/2010:| Initial Revision
// --------------------------------------------------------------------
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
//to set the VGA solution

module DE2_115_AR(

    //////////// CLOCK //////////
    CLOCK_50,
    CLOCK2_50,
    CLOCK3_50,

    //////////// LED //////////
    LEDG,
    LEDR,

    //////////// KEY //////////
    KEY,

    //////////// SW //////////
    SW,

    //////////// SEG7 //////////
    HEX0,
    HEX1,
    HEX2,
    HEX3,
    HEX4,
    HEX5,
    HEX6,
    HEX7,

    //////////// RS232 //////////
    UART_CTS,
    UART_RTS,
    UART_RXD,
    UART_TXD,

    //////////// VGA //////////
    VGA_CLK,
    VGA_BLANK_N,
    VGA_R,
    VGA_G,
    VGA_B,
    VGA_HS,
    VGA_VS,
    VGA_SYNC_N,

    //////////// SDRAM //////////
    DRAM_ADDR,
    DRAM_BA,
    DRAM_CAS_N,
    DRAM_CKE,
    DRAM_CLK,
    DRAM_CS_N,
    DRAM_DQ,
    DRAM_DQM,
    DRAM_RAS_N,
    DRAM_WE_N,

    //////////// SRAM //////////
    SRAM_ADDR,
    SRAM_CE_N,
    SRAM_DQ,
    SRAM_LB_N,
    SRAM_OE_N,
    SRAM_UB_N,
    SRAM_WE_N,

    //////////// GPIO, GPIO connect to D5M - 5M Pixel Camera //////////
    D5M_D,
    D5M_FVAL,
    D5M_LVAL,
    D5M_PIXLCLK,
    D5M_RESET_N,
    D5M_SCLK,
    D5M_SDATA,
    D5M_STROBE,
    D5M_TRIGGER,
    D5M_XCLKIN
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input                   CLOCK_50;
input                   CLOCK2_50;
input                   CLOCK3_50;

//////////// LED //////////
output       [8:0]      LEDG;
output      [17:0]      LEDR;

//////////// KEY //////////
input        [3:0]      KEY;

//////////// SW //////////
input       [17:0]      SW;

//////////// SEG7 //////////
output       [6:0]      HEX0;
output       [6:0]      HEX1;
output       [6:0]      HEX2;
output       [6:0]      HEX3;
output       [6:0]      HEX4;
output       [6:0]      HEX5;
output       [6:0]      HEX6;
output       [6:0]      HEX7;

//////////// RS232 //////////
output                  UART_CTS;
input                   UART_RTS;
input                   UART_RXD;
output                  UART_TXD;

//////////// VGA //////////
output       [7:0]      VGA_B;
output                  VGA_BLANK_N;
output                  VGA_CLK;
output       [7:0]      VGA_G;
output                  VGA_HS;
output       [7:0]      VGA_R;
output                  VGA_SYNC_N;
output                  VGA_VS;

//////////// SDRAM //////////
output      [12:0]      DRAM_ADDR;
output       [1:0]      DRAM_BA;
output                  DRAM_CAS_N;
output                  DRAM_CKE;
output                  DRAM_CLK;
output                  DRAM_CS_N;
inout       [31:0]      DRAM_DQ;
output       [3:0]      DRAM_DQM;
output                  DRAM_RAS_N;
output                  DRAM_WE_N;

//////////// SRAM //////////
output      [19:0]      SRAM_ADDR;
output                  SRAM_CE_N;
inout       [15:0]      SRAM_DQ;
output                  SRAM_LB_N;
output                  SRAM_OE_N;
output                  SRAM_UB_N;
output                  SRAM_WE_N;

//////////// GPIO, GPIO connect to D5M - 5M Pixel Camera //////////
input       [11:0]      D5M_D;
input                   D5M_FVAL;
input                   D5M_LVAL;
input                   D5M_PIXLCLK;
output                  D5M_RESET_N;
output                  D5M_SCLK;
inout                   D5M_SDATA;
input                   D5M_STROBE;
output                  D5M_TRIGGER;
output                  D5M_XCLKIN;


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire              DLY_RST_0;
wire              DLY_RST_1;
wire              DLY_RST_2;
wire              DLY_RST_3;
wire              DLY_RST_4;
wire    [11:0]    mCCD_DATA;
wire              mCCD_DVAL;
wire    [15:0]    X_Cont;
wire    [15:0]    Y_Cont;
wire    [31:0]    Frame_Cont;
reg     [11:0]    rCCD_DATA;
reg               rCCD_LVAL;
reg               rCCD_FVAL;
wire    [11:0]    sCCD_R;
wire    [11:0]    sCCD_G;
wire    [11:0]    sCCD_B;
wire              sCCD_DVAL;
wire              threshold_data;
wire    [15:0]    Sram_Read_DATA1;
wire    [15:0]    Sram_Read_DATA2;
wire              medi_data;
wire              medi_val;
wire              corner_val;
wire              corner_found;
wire    [19:0]    ul_addr, ur_addr, dl_addr, dr_addr;
wire              loader_valid;
wire    [23:0]    loader_data;
wire    [13:0]    image_addr;
wire    [23:0]    image_data;
wire              gen_read;
wire              gen_valid;
wire    [23:0]    gen_data;
wire              comp_valid;
wire     [15:0]   comp_data;
wire    [15:0]    sram_data;
wire              sram_rd_empty;
wire              sram_wr_full;
wire              decomp_read;
wire     [23:0]   decomp_data;
wire              VGA_CTRL_CLK;
wire              VGA_req;


// power on start
wire             auto_start;
//=======================================================
//  Structural coding
//=======================================================
// D5M
assign D5M_TRIGGER = 1'b1;  // tRIGGER
assign D5M_RESET_N = DLY_RST_1;

assign LEDR = SW;
assign LEDG = rCCD_FVAL;

// D5M read
always@(posedge D5M_PIXLCLK)
begin
    rCCD_DATA <= D5M_D;
    rCCD_LVAL <= D5M_LVAL;
    rCCD_FVAL <= D5M_FVAL;
end

// auto start when power on
assign auto_start = (KEY[0] && DLY_RST_3 && !DLY_RST_4) ? 1'b1 : 1'b0;

// Reset module
Reset_Delay     u2  (
        .iCLK(CLOCK2_50),
        .iRST(KEY[0]),
        .oRST_0(DLY_RST_0),
        .oRST_1(DLY_RST_1),
        .oRST_2(DLY_RST_2),
        .oRST_3(DLY_RST_3),
        .oRST_4(DLY_RST_4)
);

pll             u6  (
        .inclk0(CLOCK2_50),
        .c0(),              // 50M
        .c1(DRAM_CLK),      // 100M
        .c2(D5M_XCLKIN),    // 25M
        .c3(VGA_CLK)        // 40M
);

Image_Loader_Wrapper image_loader_wrapper (
        .clk_clk                        (CLOCK2_50),    //                        clk.clk
        .reset_reset_n                  (DLY_RST_1),    //                      reset.reset_n
        .uart_0_external_connection_rxd (UART_RXD),     // uart_0_external_connection.rxd
        .uart_0_external_connection_txd (UART_TXD),     // uart_0_external_connection.txd
        .image_loader_wrapper_out_data  (loader_data),  //   image_loader_wrapper_out.data
        .image_loader_wrapper_out_valid (loader_valid)  //   image_loader_wrapper_out.valid
);

RAM_Controller    ram_controller (
        .i_clk(CLOCK2_50),
        .i_rst_n(DLY_RST_1),
        .wen(loader_valid),
        .i_data(loader_data),
        .i_address(image_addr),
        .o_data(image_data)
);
// D5M I2C control
I2C_CCD_Config  u8 (
        // Host Side
        .iCLK(CLOCK2_50),
        .iRST_N(DLY_RST_2),
        .iEXPOSURE_ADJ(KEY[1]),
        .iEXPOSURE_DEC_p(SW[0]),
        .iZOOM_MODE_SW(SW[16]),
        // I2C Side
        .I2C_SCLK(D5M_SCLK),
        .I2C_SDAT(D5M_SDATA)
);
// D5M image capture
CCD_Capture     u3  (
        .oDATA(mCCD_DATA),
        .oDVAL(mCCD_DVAL),
        .oX_Cont(X_Cont),
        .oY_Cont(Y_Cont),
        .oFrame_Cont(Frame_Cont),
        .iDATA(rCCD_DATA),
        .iFVAL(rCCD_FVAL),
        .iLVAL(rCCD_LVAL),
        .iSTART(!KEY[3]|auto_start),
        .iEND(!KEY[2]),
        .iCLK(~D5M_PIXLCLK),
        .iRST(DLY_RST_2)
);
// D5M raw date convert to RGB data
RAW2RGB         u4  (
        .iCLK(D5M_PIXLCLK),
        .iRST_n(DLY_RST_1),
        .iData(mCCD_DATA),
        .iDval(mCCD_DVAL),
        .oRed(sCCD_R),
        .oGreen(sCCD_G),
        .oBlue(sCCD_B),
        .oDval(sCCD_DVAL),
        .iZoom(SW[16]),
        .iX_Cont(X_Cont),
        .iY_Cont(Y_Cont),
        .oThreshold(threshold_data)
);
// SDRam VGA_req and Write as Frame Buffer
Sdram_Control   u7  (
        // HOST Side
        .RESET_N(KEY[0]),
        .CLK(DRAM_CLK),

        // FIFO Write Side 1
        .WR1_DATA({1'b0,sCCD_G[11:7],sCCD_B[11:2]}),
        .WR1(sCCD_DVAL),
        .WR1_LOAD(!DLY_RST_0),
        .WR1_CLK(D5M_PIXLCLK),

        // FIFO Write Side 2
        .WR2_DATA({1'b0,sCCD_G[6:2],sCCD_R[11:2]}),
        .WR2(sCCD_DVAL),
        .WR2_LOAD(!DLY_RST_0),
        .WR2_CLK(D5M_PIXLCLK),

        // FIFO VGA_req Side 1
        .RD1_DATA(Sram_Read_DATA1),
        .RD1(gen_read),
        .RD1_LOAD(!DLY_RST_0),
        .RD1_CLK(CLOCK2_50),

        // FIFO VGA_req Side 2
        .RD2_DATA(Sram_Read_DATA2),
        .RD2(gen_read),
        .RD2_LOAD(!DLY_RST_0),
        .RD2_CLK(CLOCK2_50),

        // SDRAM Side
        .SA(DRAM_ADDR),
        .BA(DRAM_BA),
        .CS_N(DRAM_CS_N),
        .CKE(DRAM_CKE),
        .RAS_N(DRAM_RAS_N),
        .CAS_N(DRAM_CAS_N),
        .WE_N(DRAM_WE_N),
        .DQ(DRAM_DQ),
        .DQM(DRAM_DQM)
);

Median_Filter medium_filter (
        .i_clk(D5M_PIXLCLK),
        .i_rst_n(DLY_RST_1),
        .i_valid(sCCD_DVAL),
        .i_data(threshold_data),
        .o_valid(medi_val),
        .o_data(medi_data)
);

Corner_Finder corner_finder (
        .i_clk(D5M_PIXLCLK),
        .i_rst_n(DLY_RST_1),
        .i_valid(medi_val),
        .i_data(medi_data),
        .o_valid(corner_val),
        .o_success(corner_found),
        .o_ul_addr(ul_addr),
        .o_ur_addr(ur_addr),
        .o_dl_addr(dl_addr),
        .o_dr_addr(dr_addr)
);

Image_Generator img_gen (
        .i_clk(CLOCK2_50),
        .i_rst_n(DLY_RST_1),
        .i_pause(sram_wr_full),
        .i_addr_valid(corner_val),
        .i_enable(corner_found),
        .i_ul_addr(ul_addr),
        .i_ur_addr(ur_addr),
        .i_dl_addr(dl_addr),
        .i_dr_addr(dr_addr),
        .o_req_cam_data(gen_read),
        .i_cam_data({2'b0, Sram_Read_DATA2[9:0], Sram_Read_DATA1[14:10], Sram_Read_DATA2[14:10], Sram_Read_DATA1[9:0]}),
        .o_req_img_addr(image_addr),
        .i_img_data(image_data),
        .o_vaild(gen_valid),
        .o_data(gen_data)
);

Compressor compressor   (
        .i_clk(CLOCK2_50),
        .i_rst_n(DLY_RST_1),
        .i_gen_valid(gen_valid),
        .i_data(gen_data),
        .o_valid(comp_valid),
        .o_data(comp_data)
);

Sram_Contoller      sram_control (
        .i_clk(DRAM_CLK),
        .i_rst_n(DLY_RST_1),

        .wr_data(comp_data),
        .wr_request(comp_valid),
        .wr_clk(CLOCK2_50),

        .rd_data(sram_data),
        .rd_request(decomp_read),
        .rd_clk(VGA_CLK),

        .o_SRAM_ADDR(SRAM_ADDR),
        .io_SRAM_DQ(SRAM_DQ),
        .o_SRAM_WE_N(SRAM_WE_N),
        .o_SRAM_CE_N(SRAM_CE_N),
        .o_SRAM_OE_N(SRAM_OE_N),
        .o_SRAM_LB_N(SRAM_LB_N),
        .o_SRAM_UB_N(SRAM_UB_N),

        .o_rd_use(),
        .o_wr_use(sram_wr_full)
);

Decompressor decompressor (
        .i_clk(VGA_CLK),
        .i_rst_n(DLY_RST_2),
        .i_req(VGA_req),
        .i_data(sram_data),
        .o_req(decomp_read),
        .o_data(decomp_data)
);

// VGA DISPLAY
VGA_Controller  u1 (
        // Host Side
        .oRequest(VGA_req),
        .iRed(decomp_data[23:16]),
        .iGreen(decomp_data[15:8]),
        .iBlue(decomp_data[7:0]),
        // VGA Side
        .oVGA_R(VGA_R),
        .oVGA_G(VGA_G),
        .oVGA_B(VGA_B),
        .oVGA_H_SYNC(VGA_HS),
        .oVGA_V_SYNC(VGA_VS),
        .oVGA_SYNC(VGA_SYNC_N),
        .oVGA_BLANK(VGA_BLANK_N),
        // Control Signal
        .iCLK(~VGA_CLK),
        .iRST_N(DLY_RST_2)
);
// Frame count display
SEG7_LUT_8      u5  (
        .oSEG0(HEX0),
        .oSEG1(HEX1),
        .oSEG2(HEX2),
        .oSEG3(HEX3),
        .oSEG4(HEX4),
        .oSEG5(HEX5),
        .oSEG6(HEX6),
        .oSEG7(HEX7),
        .iDIG(Frame_Cont[31:0])
);


endmodule
